# Python Script, API Version = V20 Beta

while GetRootPart().Bodies.Count>0:
    GetRootPart().Bodies[0].Delete()

while GetRootPart().Curves.Count>0:
    GetRootPart().Curves[0].Delete()

while GetRootPart().DatumPlanes.Count>0:
    GetRootPart().DatumPlanes[0].Delete()

while GetRootPart().Components.Count>0:
    GetRootPart().Components[0].Delete()


from math import sin, cos, asin, acos, sqrt, atan, tan
d = [1, 2]
Unit=int(Parameters.Unit)
shell_id = float(Parameters.Shell_BMID)
shell_th = float(Parameters.Shell_Thk)
head_ir = float(Parameters.Head_BMIR)
head_th = float(Parameters.Head_Thk)
manway_top = float(Parameters.Nozzle_Projection_from_TL)
bm_id = float(Parameters.Nozzle_BMID)
neck_od = float(Parameters.Neck_OD)
hub_od = float(Parameters.Hub_OD)
hub_hg = float(Parameters.Hub_Min_Height)
angle = DEG(Parameters.Hub_to_Neck_Angle)
lip_od = float(Parameters.Lip_OD)
flange_od = float(Parameters.Flange_OD)
flange_th = float(Parameters.Flange_Thk)
bcd = float(Parameters.BCD)
stud_d = float(Parameters.Bolt_Hole_Dia)
dist = float(Parameters.Total_Nozzle_Height)
weld_ol=float(Parameters.Weld_Overlay_on_Flange_Face)
Nozzle_Head_Inside_Fillet = float(Parameters.Nozzle_Head_Inside_Fillet)
Nozzle_Head_Outside_Fillet = float(Parameters.Nozzle_Head_Outside_Fillet)
Neck_Flange_Fillet = float(Parameters.Neck_Flange_Fillet)
Hub_Neck_Fillet = float(Parameters.Hub_Neck_Fillet)

if(Unit not in d):
    print("Invalid Unit input")


else:


    if(Unit == 1):
        # Set Sketch Plane
        selection = Plane.PlaneXY
        result = ViewHelper.SetSketchPlane(selection, None)
        # EndBlock

        result = SketchCircle.Create(Point2D.Create(MM(0), MM(0)), MM(head_ir))

        # Set New Sketch
        result = SketchHelper.StartConstraintSketching()
        # EndBlock

        # Offset Sketch Curve
        result = SketchOffsetCurve.Create(Selection.Create(GetRootPart().DatumPlanes[0].Curves[0]), MM(-head_th))
        # EndBlock


        # Sketch Line
        start = Point2D.Create(MM(bm_id*0.5), MM(0))
        end = Point2D.Create(MM(bm_id*0.5), MM(manway_top - weld_ol))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Create 
        SketchLine.Create(Point2D.Create(MM(flange_od/2), MM(manway_top - weld_ol)), Point2D.Create(MM(bm_id/2), MM(manway_top - weld_ol)))
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(MM(flange_od/2), MM(manway_top - weld_ol)), Point2D.Create(MM(flange_od/2), MM(manway_top - weld_ol-flange_th)))
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(MM(flange_od/2), MM(manway_top - weld_ol-flange_th)), Point2D.Create(MM(neck_od/2), MM(manway_top - weld_ol-flange_th)))
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(MM(hub_od/2), MM((head_ir+head_th)*sin(acos(hub_od/2/(head_ir+head_th))))), Point2D.Create(MM(hub_od/2), MM(head_ir+head_th+hub_hg)))
        # EndBlock

        # Sketch Line
        start = Point2D.Create(MM(neck_od*0.5), MM(((hub_od*0.5-neck_od*0.5)/cos(angle))*sin(angle) + (head_ir+head_th) + hub_hg))
        end = Point2D.Create(MM(hub_od*0.5), MM((head_ir+head_th) + hub_hg))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(MM(neck_od/2), MM(manway_top - weld_ol-flange_th)), Point2D.Create(MM(neck_od/2), MM(((hub_od*0.5-neck_od*0.5)/cos(angle))*sin(angle) + (head_ir+head_th) + hub_hg)))
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(MM(head_ir*(cos(asin((manway_top - weld_ol-dist)/head_ir)))), MM(manway_top - weld_ol-dist)), Point2D.Create(MM(bm_id/2), MM(manway_top - weld_ol-dist)))
        # EndBlock


        # Sketch Line
        start = Point2D.Create(MM(shell_id*0.5), MM(head_ir*sin(acos(shell_id*0.5/head_ir))))
        end = Point2D.Create(MM((head_ir+head_th)*cos(asin(head_ir*sin(acos(shell_id*0.5/head_ir))/(head_ir+head_th)))), MM(head_ir*sin(acos(shell_id*0.5/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(MM(shell_id*0.5 + shell_th), MM(head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th)))
        end = Point2D.Create(MM((head_ir+head_th)*cos(asin(head_ir*sin(acos(shell_id*0.5/head_ir))/(head_ir+head_th)))), MM(head_ir*sin(acos(shell_id*0.5/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(MM(shell_id*0.5 + shell_th), MM(head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th)))
        end = Point2D.Create(MM(shell_id*0.5), MM(head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th)))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(MM(shell_id*0.5 + shell_th), MM((head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th))-5*((shell_id+shell_th)*0.5*shell_th)**0.5))
        end = Point2D.Create(MM(shell_id*0.5 + shell_th), MM(head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th)))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(MM(shell_id*0.5 + shell_th), MM((head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th))-5*((shell_id+shell_th)*0.5*shell_th)**0.5))
        end = Point2D.Create(MM(shell_id*0.5), MM((head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th))-5*((shell_id+shell_th)*0.5*shell_th)**0.5))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(MM(shell_id*0.5), MM((head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th))-5*((shell_id+shell_th)*0.5*shell_th)**0.5))
        end = Point2D.Create(MM(shell_id*0.5), MM(head_ir*sin(acos(shell_id*0.5/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock



        #Split---------------------------------------------------------------------

        # Sketch Line
        #1/3.0 of difference b/w hub od and shell id + hub od, radial split, tan(theta) = y/x.
        start = Point2D.Create(MM((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5),MM(head_ir*sin(acos(((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5)/head_ir))))
        end = Point2D.Create(MM((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5 + head_th*(((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5)/head_ir)),MM((head_ir+head_th)*sin(acos(((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5)/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Point
        SketchPoint.Create(Point2D.Create(MM((bcd-stud_d)/2), MM(manway_top - weld_ol)))
        # EndBlock

        # Sketch Point
        SketchPoint.Create(Point2D.Create(MM((bcd+stud_d)/2), MM(manway_top - weld_ol)))
        # EndBlock


        #Revolution-------------------------------------------------


        # Solidify Sketch
        mode = InteractionMode.Solid
        result = ViewHelper.SetViewMode(mode, None)
        # EndBlock


        # Revolve 3 Faces
        selection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[1],
            GetRootPart().Bodies[0].Faces[7],
            GetRootPart().Bodies[0].Faces[6]])
        axisSelection = Selection.Create(GetRootPart().CoordinateSystems[0].Axes[1])
        axis = RevolveFaces.GetAxisFromSelection(selection, axisSelection)
        options = RevolveFaceOptions()
        options.ExtrudeType = ExtrudeType.Add
        result = RevolveFaces.Execute(selection, axis, DEG(-360), options)
        # EndBlock

        # Revolve 1 Face
        selection = FaceSelection.Create(GetRootPart().Bodies[0].Faces[5])
        axisSelection = Selection.Create(GetRootPart().CoordinateSystems[0].Axes[1])
        axis = RevolveFaces.GetAxisFromSelection(selection, axisSelection)
        options = RevolveFaceOptions()
        options.ExtrudeType = ExtrudeType.ForceIndependent
        result = RevolveFaces.Execute(selection, axis, DEG(-360), options)
        # EndBlock

        # Revolve 3 Faces
        selection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[7],
            GetRootPart().Bodies[0].Faces[6],
            GetRootPart().Bodies[0].Faces[1]])
        axisSelection = Selection.Create(GetRootPart().CoordinateSystems[0].Axes[1])
        axis = RevolveFaces.GetAxisFromSelection(selection, axisSelection)
        options = RevolveFaceOptions()
        options.ExtrudeType = ExtrudeType.ForceIndependent
        result = RevolveFaces.Execute(selection, axis, DEG(-360), options)
        # EndBlock

        # Revolve 3 Faces
        selection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[2],
            GetRootPart().Bodies[0].Faces[1],
            GetRootPart().Bodies[0].Faces[0]])
        axisSelection = Selection.Create(GetRootPart().CoordinateSystems[0].Axes[1])
        axis = RevolveFaces.GetAxisFromSelection(selection, axisSelection)
        options = RevolveFaceOptions()
        options.ExtrudeType = ExtrudeType.ForceIndependent
        result = RevolveFaces.Execute(selection, axis, DEG(-360), options)
        # EndBlock

        # Delete Selection
        selection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[1],
            GetRootPart().Bodies[0].Faces[0]])
        result = Delete.Execute(selection)
        # EndBlock

        # Sweep Point
        selection = Selection.Create(GetRootPart().Curves[0])
        revolveAxis = Line.Create(Point.Create(MM(0), MM(2167.58), MM(0)), 
            -Direction.DirY)
        result = RevolvePoints.Execute(selection, revolveAxis, DEG(360), None)
        # EndBlock

        # Sweep Point
        selection = Selection.Create(GetRootPart().Curves[2])
        revolveAxis = Line.Create(Point.Create(MM(0), MM(2167.58), MM(0)), 
            -Direction.DirY)
        result = RevolvePoints.Execute(selection, revolveAxis, DEG(360), None)
        # EndBlock



        # Set Sketch Plane
        selection = Plane.PlaneXY
        result = ViewHelper.SetSketchPlane(selection, None)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(MM(0), MM(0))
        end = Point2D.Create(MM(100*lip_od*0.5/head_ir), MM(100*sin(acos(lip_od*0.5/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock


        # Sketch Line
        start = Point2D.Create(MM(0), MM(-5/3*((shell_id+shell_th)*0.5*shell_th)**0.5))
        end = Point2D.Create(MM(100), MM(-5/3*((shell_id+shell_th)*0.5*shell_th)**0.5))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Solidify Sketch
        mode = InteractionMode.Solid
        result = ViewHelper.SetViewMode(mode, None)
        # EndBlock


        # Split Faces
        options = SplitFaceOptions()
        selection = FaceSelection.Create(GetRootPart().Bodies[0].Faces[0])
        cutter = Selection.Create(GetRootPart().Curves[0])
        result = SplitFace.ByCutter(selection, cutter, options)
        # EndBlock

        # Split Faces
        options = SplitFaceOptions()
        selection = FaceSelection.Create(GetRootPart().Bodies[0].Faces[11])
        cutter = Selection.Create(GetRootPart().Curves[1])
        result = SplitFace.ByCutter(selection, cutter, options)
        # EndBlock

        # Revolve 1 Sketch Curve
        selection = Selection.Create(GetRootPart().Curves[2])
        result = RevolveEdges.Execute(selection, Line.Create(Point.Create(MM(0), MM(2167.58), MM(0)), 
            -Direction.DirY), DEG(360), False, ExtrudeType.None)
        # EndBlock

        # Revolve 1 Sketch Curve
        selection = Selection.Create(GetRootPart().Curves[2])
        result = RevolveEdges.Execute(selection, Line.Create(Point.Create(MM(0), MM(2167.58), MM(0)), 
            -Direction.DirY), DEG(360), False, ExtrudeType.None)
        # EndBlock

        # Delete Objects
        selection = Selection.Create(GetRootPart().GetChildren[IDocObject]()[-1])
        result = Delete.Execute(selection)
        # EndBlock

        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[0])
        toolFaces = FaceSelection.Create(GetRootPart().Bodies[4].Faces[0])
        result = SplitBody.ByCutter(selection, toolFaces, True)
        # EndBlock


        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[3])
        toolFaces = FaceSelection.Create(GetRootPart().Bodies[5].Faces[0])
        result = SplitBody.ByCutter(selection, toolFaces, True)
        # EndBlock

        # Delete Selection
        selection = Selection.Create([GetRootPart().GetChildren[IDocObject]()[-1],
            GetRootPart().Bodies[5],
            GetRootPart().Bodies[4]])
        result = Delete.Execute(selection)
        # EndBlock

        # Delete Objects
        selection = Selection.Create(GetRootPart().GetChildren[IDocObject]()[-1])
        result = Delete.Execute(selection)
        # EndBlock
        
        
        
        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[8])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, MM(Nozzle_Head_Inside_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[6])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, MM(Nozzle_Head_Outside_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[4])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, MM(Hub_Neck_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[3])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, MM(Neck_Flange_Fillet), options, None)
        # EndBlock


        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[:])
        toolFaces = Plane.PlaneXY
        result = SplitBody.ByCutter(selection, toolFaces)
        # EndBlock


        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[:])
        toolFaces = Plane.PlaneYZ
        result = SplitBody.ByCutter(selection, toolFaces)
        # EndBlock
        
        selection = Selection.Create(GetRootPart().Curves[:])
        result = Delete.Execute(selection)
        # EndBlock
        
        
        
        
        
        

    else:

        # Set Sketch Plane
        selection = Plane.PlaneXY
        result = ViewHelper.SetSketchPlane(selection, None)
        # EndBlock

        result = SketchCircle.Create(Point2D.Create(IN(0), IN(0)), IN(head_ir))

        # Set New Sketch
        result = SketchHelper.StartConstraintSketching()
        # EndBlock

        # Offset Sketch Curve
        result = SketchOffsetCurve.Create(Selection.Create(GetRootPart().DatumPlanes[0].Curves[0]), IN(-head_th))
        # EndBlock


        # Sketch Line
        start = Point2D.Create(IN(bm_id*0.5), IN(0))
        end = Point2D.Create(IN(bm_id*0.5), IN(manway_top - weld_ol))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Create 
        SketchLine.Create(Point2D.Create(IN(flange_od/2), IN(manway_top - weld_ol)), Point2D.Create(IN(bm_id/2), IN(manway_top - weld_ol)))
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(IN(flange_od/2), IN(manway_top - weld_ol)), Point2D.Create(IN(flange_od/2), IN(manway_top - weld_ol-flange_th)))
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(IN(flange_od/2), IN(manway_top - weld_ol-flange_th)), Point2D.Create(IN(neck_od/2), IN(manway_top - weld_ol-flange_th)))
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(IN(hub_od/2), IN((head_ir+head_th)*sin(acos(hub_od/2/(head_ir+head_th))))), Point2D.Create(IN(hub_od/2), IN(head_ir+head_th+hub_hg)))
        # EndBlock

        # Sketch Line
        start = Point2D.Create(IN(neck_od*0.5), IN(((hub_od*0.5-neck_od*0.5)/cos(angle))*sin(angle) + (head_ir+head_th) + hub_hg))
        end = Point2D.Create(IN(hub_od*0.5), IN((head_ir+head_th) + hub_hg))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(IN(neck_od/2), IN(manway_top - weld_ol-flange_th)), Point2D.Create(IN(neck_od/2), IN(((hub_od*0.5-neck_od*0.5)/cos(angle))*sin(angle) + (head_ir+head_th) + hub_hg)))
        # EndBlock

        # Create Line
        SketchLine.Create(Point2D.Create(IN(head_ir*(cos(asin((manway_top - weld_ol-dist)/head_ir)))), IN(manway_top - weld_ol-dist)), Point2D.Create(IN(bm_id/2), IN(manway_top - weld_ol-dist)))
        # EndBlock


        # Sketch Line
        start = Point2D.Create(IN(shell_id*0.5), IN(head_ir*sin(acos(shell_id*0.5/head_ir))))
        end = Point2D.Create(IN((head_ir+head_th)*cos(asin(head_ir*sin(acos(shell_id*0.5/head_ir))/(head_ir+head_th)))), IN(head_ir*sin(acos(shell_id*0.5/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(IN(shell_id*0.5 + shell_th), IN(head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th)))
        end = Point2D.Create(IN((head_ir+head_th)*cos(asin(head_ir*sin(acos(shell_id*0.5/head_ir))/(head_ir+head_th)))), IN(head_ir*sin(acos(shell_id*0.5/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(IN(shell_id*0.5 + shell_th), IN(head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th)))
        end = Point2D.Create(IN(shell_id*0.5), IN(head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th)))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(IN(shell_id*0.5 + shell_th), IN((head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th))-5*((shell_id+shell_th)*0.5*shell_th)**0.5))
        end = Point2D.Create(IN(shell_id*0.5 + shell_th), IN(head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th)))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(IN(shell_id*0.5 + shell_th), IN((head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th))-5*((shell_id+shell_th)*0.5*shell_th)**0.5))
        end = Point2D.Create(IN(shell_id*0.5), IN((head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th))-5*((shell_id+shell_th)*0.5*shell_th)**0.5))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(IN(shell_id*0.5), IN((head_ir*sin(acos(shell_id*0.5/head_ir)) - 3*(shell_th-head_th))-5*((shell_id+shell_th)*0.5*shell_th)**0.5))
        end = Point2D.Create(IN(shell_id*0.5), IN(head_ir*sin(acos(shell_id*0.5/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock



        #Split---------------------------------------------------------------------

        # Sketch Line
        #1/3.0 of difference b/w hub od and shell id + hub od, radial split, tan(theta) = y/x.
        start = Point2D.Create(IN((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5),IN(head_ir*sin(acos(((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5)/head_ir))))
        end = Point2D.Create(IN((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5 + head_th*(((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5)/head_ir)),IN((head_ir+head_th)*sin(acos(((shell_id*0.5-hub_od*0.5)/3.0+hub_od*0.5)/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Sketch Point
        SketchPoint.Create(Point2D.Create(IN((bcd-stud_d)/2), IN(manway_top - weld_ol)))
        # EndBlock

        # Sketch Point
        SketchPoint.Create(Point2D.Create(IN((bcd+stud_d)/2), IN(manway_top - weld_ol)))
        # EndBlock


        #Revolution-------------------------------------------------


        # Solidify Sketch
        mode = InteractionMode.Solid
        result = ViewHelper.SetViewMode(mode, None)
        # EndBlock


        # Revolve 3 Faces
        selection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[1],
            GetRootPart().Bodies[0].Faces[7],
            GetRootPart().Bodies[0].Faces[6]])
        axisSelection = Selection.Create(GetRootPart().CoordinateSystems[0].Axes[1])
        axis = RevolveFaces.GetAxisFromSelection(selection, axisSelection)
        options = RevolveFaceOptions()
        options.ExtrudeType = ExtrudeType.Add
        result = RevolveFaces.Execute(selection, axis, DEG(-360), options)
        # EndBlock

        # Revolve 1 Face
        selection = FaceSelection.Create(GetRootPart().Bodies[0].Faces[5])
        axisSelection = Selection.Create(GetRootPart().CoordinateSystems[0].Axes[1])
        axis = RevolveFaces.GetAxisFromSelection(selection, axisSelection)
        options = RevolveFaceOptions()
        options.ExtrudeType = ExtrudeType.ForceIndependent
        result = RevolveFaces.Execute(selection, axis, DEG(-360), options)
        # EndBlock

        # Revolve 3 Faces
        selection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[7],
            GetRootPart().Bodies[0].Faces[6],
            GetRootPart().Bodies[0].Faces[1]])
        axisSelection = Selection.Create(GetRootPart().CoordinateSystems[0].Axes[1])
        axis = RevolveFaces.GetAxisFromSelection(selection, axisSelection)
        options = RevolveFaceOptions()
        options.ExtrudeType = ExtrudeType.ForceIndependent
        result = RevolveFaces.Execute(selection, axis, DEG(-360), options)
        # EndBlock

        # Revolve 3 Faces
        selection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[2],
            GetRootPart().Bodies[0].Faces[1],
            GetRootPart().Bodies[0].Faces[0]])
        axisSelection = Selection.Create(GetRootPart().CoordinateSystems[0].Axes[1])
        axis = RevolveFaces.GetAxisFromSelection(selection, axisSelection)
        options = RevolveFaceOptions()
        options.ExtrudeType = ExtrudeType.ForceIndependent
        result = RevolveFaces.Execute(selection, axis, DEG(-360), options)
        # EndBlock

        # Delete Selection
        selection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[1],
            GetRootPart().Bodies[0].Faces[0]])
        result = Delete.Execute(selection)
        # EndBlock

        # Sweep Point
        selection = Selection.Create(GetRootPart().Curves[0])
        revolveAxis = Line.Create(Point.Create(IN(0), IN(2167.58), IN(0)), 
            -Direction.DirY)
        result = RevolvePoints.Execute(selection, revolveAxis, DEG(360), None)
        # EndBlock

        # Sweep Point
        selection = Selection.Create(GetRootPart().Curves[2])
        revolveAxis = Line.Create(Point.Create(IN(0), IN(2167.58), IN(0)), 
            -Direction.DirY)
        result = RevolvePoints.Execute(selection, revolveAxis, DEG(360), None)
        # EndBlock



        # Set Sketch Plane
        selection = Plane.PlaneXY
        result = ViewHelper.SetSketchPlane(selection, None)
        # EndBlock

        # Sketch Line
        start = Point2D.Create(IN(0), IN(0))
        end = Point2D.Create(IN(100*lip_od*0.5/head_ir), IN(100*sin(acos(lip_od*0.5/head_ir))))
        result = SketchLine.Create(start, end)
        # EndBlock


        # Sketch Line
        start = Point2D.Create(IN(0), IN(-5/3*((shell_id+shell_th)*0.5*shell_th)**0.5))
        end = Point2D.Create(IN(100), IN(-5/3*((shell_id+shell_th)*0.5*shell_th)**0.5))
        result = SketchLine.Create(start, end)
        # EndBlock

        # Solidify Sketch
        mode = InteractionMode.Solid
        result = ViewHelper.SetViewMode(mode, None)
        # EndBlock


        # Split Faces
        options = SplitFaceOptions()
        selection = FaceSelection.Create(GetRootPart().Bodies[0].Faces[0])
        cutter = Selection.Create(GetRootPart().Curves[0])
        result = SplitFace.ByCutter(selection, cutter, options)
        # EndBlock

        # Split Faces
        options = SplitFaceOptions()
        selection = FaceSelection.Create(GetRootPart().Bodies[0].Faces[11])
        cutter = Selection.Create(GetRootPart().Curves[1])
        result = SplitFace.ByCutter(selection, cutter, options)
        # EndBlock

        # Revolve 1 Sketch Curve
        selection = Selection.Create(GetRootPart().Curves[2])
        result = RevolveEdges.Execute(selection, Line.Create(Point.Create(IN(0), IN(2167.58), IN(0)), 
            -Direction.DirY), DEG(360), False, ExtrudeType.None)
        # EndBlock

        # Revolve 1 Sketch Curve
        selection = Selection.Create(GetRootPart().Curves[2])
        result = RevolveEdges.Execute(selection, Line.Create(Point.Create(IN(0), IN(2167.58), IN(0)), 
            -Direction.DirY), DEG(360), False, ExtrudeType.None)
        # EndBlock

        # Delete Objects
        selection = Selection.Create(GetRootPart().GetChildren[IDocObject]()[-1])
        result = Delete.Execute(selection)
        # EndBlock

        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[0])
        toolFaces = FaceSelection.Create(GetRootPart().Bodies[4].Faces[0])
        result = SplitBody.ByCutter(selection, toolFaces, True)
        # EndBlock


        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[3])
        toolFaces = FaceSelection.Create(GetRootPart().Bodies[5].Faces[0])
        result = SplitBody.ByCutter(selection, toolFaces, True)
        # EndBlock

        # Delete Selection
        selection = Selection.Create([GetRootPart().GetChildren[IDocObject]()[-1],
            GetRootPart().Bodies[5],
            GetRootPart().Bodies[4]])
        result = Delete.Execute(selection)
        # EndBlock

        # Delete Objects
        selection = Selection.Create(GetRootPart().GetChildren[IDocObject]()[-1])
        result = Delete.Execute(selection)
        # EndBlock
    
        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[8])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, IN(Nozzle_Head_Inside_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[6])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, IN(Nozzle_Head_Outside_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[4])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, IN(Hub_Neck_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[3])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, IN(Neck_Flange_Fillet), options, None)
        # EndBlock


        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[:])
        toolFaces = Plane.PlaneXY
        result = SplitBody.ByCutter(selection, toolFaces, True)
        # EndBlock


        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[:])
        toolFaces = Plane.PlaneYZ
        result = SplitBody.ByCutter(selection, toolFaces, True)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[8])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, IN(Nozzle_Head_Inside_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[6])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, IN(Nozzle_Head_Outside_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[4])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, IN(Hub_Neck_Fillet), options, None)
        # EndBlock

        # Create 1 Round
        selection = EdgeSelection.Create(GetRootPart().Bodies[0].Edges[3])
        options = ConstantRoundOptions()
        result = ConstantRound.Execute(selection, IN(Neck_Flange_Fillet), options, None)
        # EndBlock


        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[:])
        toolFaces = Plane.PlaneXY
        result = SplitBody.ByCutter(selection, toolFaces, True)
        # EndBlock


        # Slice Body by Faces
        selection = BodySelection.Create(GetRootPart().Bodies[:])
        toolFaces = Plane.PlaneYZ
        result = SplitBody.ByCutter(selection, toolFaces, True)
        # EndBlock

        selection = Selection.Create(GetRootPart().Curves[:])
        result = Delete.Execute(selection)
        # EndBlock
    
    
    # Create Named Selection Group
    primarySelection = FaceSelection.Create([GetRootPart().Bodies[0].Faces[15],
        GetRootPart().Bodies[6].Faces[13],
        GetRootPart().Bodies[18].Faces[13],
        GetRootPart().Bodies[12].Faces[15],
        GetRootPart().Bodies[0].Faces[17],
        GetRootPart().Bodies[6].Faces[11],
        GetRootPart().Bodies[18].Faces[11],
        GetRootPart().Bodies[12].Faces[17],
        GetRootPart().Bodies[0].Faces[18],
        GetRootPart().Bodies[6].Faces[9],
        GetRootPart().Bodies[18].Faces[9],
        GetRootPart().Bodies[12].Faces[18],
        GetRootPart().Bodies[0].Faces[16],
        GetRootPart().Bodies[6].Faces[7],
        GetRootPart().Bodies[18].Faces[7],
        GetRootPart().Bodies[12].Faces[16],
        GetRootPart().Bodies[4].Faces[4],
        GetRootPart().Bodies[10].Faces[5],
        GetRootPart().Bodies[22].Faces[5],
        GetRootPart().Bodies[16].Faces[4],
        GetRootPart().Bodies[1].Faces[4],
        GetRootPart().Bodies[7].Faces[3],
        GetRootPart().Bodies[19].Faces[3],
        GetRootPart().Bodies[13].Faces[4],
        GetRootPart().Bodies[2].Faces[3],
        GetRootPart().Bodies[8].Faces[4],
        GetRootPart().Bodies[20].Faces[4],
        GetRootPart().Bodies[14].Faces[3],
        GetRootPart().Bodies[3].Faces[2],
        GetRootPart().Bodies[9].Faces[2],
        GetRootPart().Bodies[21].Faces[2],
        GetRootPart().Bodies[15].Faces[2],
        GetRootPart().Bodies[11].Faces[2],
        GetRootPart().Bodies[23].Faces[2],
        GetRootPart().Bodies[17].Faces[2],
        GetRootPart().Bodies[5].Faces[2]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    result = NamedSelection.Rename("Group1", "Internal Pressure")
    # EndBlock


    # Create Named Selection Group
    primarySelection = FaceSelection.Create([GetRootPart().Bodies[11].Faces[5],
        GetRootPart().Bodies[5].Faces[3],
        GetRootPart().Bodies[23].Faces[5],
        GetRootPart().Bodies[17].Faces[3]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Displacement")
    # EndBlock


    # Create Named Selection Group
    primarySelection = FaceSelection.Create([GetRootPart().Bodies[6].Faces[18],
        GetRootPart().Bodies[0].Faces[11],
        GetRootPart().Bodies[18].Faces[18],
        GetRootPart().Bodies[12].Faces[11]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle Thrust")
    # EndBlock

    # Create Named Selection Group
    primarySelection = FaceSelection.Create([GetRootPart().Bodies[6].Faces[15],
        GetRootPart().Bodies[6].Faces[18],
        GetRootPart().Bodies[6].Faces[17],
        GetRootPart().Bodies[0].Faces[13],
        GetRootPart().Bodies[0].Faces[11],
        GetRootPart().Bodies[0].Faces[9],
        GetRootPart().Bodies[18].Faces[15],
        GetRootPart().Bodies[18].Faces[18],
        GetRootPart().Bodies[18].Faces[17],
        GetRootPart().Bodies[12].Faces[9],
        GetRootPart().Bodies[12].Faces[11],
        GetRootPart().Bodies[12].Faces[13]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Piping Load")
    # EndBlock

    # Create Named Selection Group
    primarySelection = Selection.CreateByObjects([GetRootPart().Bodies[12],
        GetRootPart().Bodies[0],
        GetRootPart().Bodies[6],
        GetRootPart().Bodies[18]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle_Body")
    # EndBlock

    # Create Named Selection Group
    primarySelection = Selection.CreateByObjects([GetRootPart().Bodies[16],
        GetRootPart().Bodies[4],
        GetRootPart().Bodies[10],
        GetRootPart().Bodies[22]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle_Head_Transition_Body")
    # EndBlock

    # Create Named Selection Group
    primarySelection = Selection.CreateByObjects([GetRootPart().Bodies[13],
        GetRootPart().Bodies[1],
        GetRootPart().Bodies[7],
        GetRootPart().Bodies[19]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Head_Body")
    # EndBlock

    # Create Named Selection Group
    primarySelection = Selection.CreateByObjects([GetRootPart().Bodies[14],
        GetRootPart().Bodies[2],
        GetRootPart().Bodies[8],
        GetRootPart().Bodies[20]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Head_Shell_Junction")
    # EndBlock

    # Create Named Selection Group
    primarySelection = Selection.CreateByObjects([GetRootPart().Bodies[3],
        GetRootPart().Bodies[9],
        GetRootPart().Bodies[21],
        GetRootPart().Bodies[15]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Shell_Transition_1")
    # EndBlock

    # Create Named Selection Group
    primarySelection = Selection.CreateByObjects([GetRootPart().Bodies[17],
        GetRootPart().Bodies[23],
        GetRootPart().Bodies[5],
        GetRootPart().Bodies[11]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Shell_Transition_2")
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[12].Edges[0],
        GetRootPart().Bodies[0].Edges[0]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle_Head_Inside_Fillet_Size")
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[0].Edges[10],
        GetRootPart().Bodies[12].Edges[9]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle_Head_Outside_Fillet_Size")
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[0].Edges[13],
        GetRootPart().Bodies[12].Edges[14]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle_neck_Flange_Fillet_Size")
    # EndBlock

    # Create Named Selection Group
    primarySelection = FaceSelection.Create(GetRootPart().Bodies[12].Faces[0])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle_Face_Size")
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[12].Edges[5],
        GetRootPart().Bodies[0].Edges[6]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle_Head_Junction_Edge_Sizing")
    # EndBlock

    # Change Object Visibility
    ViewHelper.ShowAll()
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[6].Edges[36],
        GetRootPart().Bodies[0].Edges[45],
        GetRootPart().Bodies[12].Edges[45],
        GetRootPart().Bodies[18].Edges[36]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Nozzle_Circular_Edge_Size")
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[1].Edges[2],
        GetRootPart().Bodies[13].Edges[1]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Head_Transition_thk_Edge_Size.")
    # EndBlock

    # Change Object Visibility
    ViewHelper.ShowAll()
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[1].Edges[10],
        GetRootPart().Bodies[7].Edges[11],
        GetRootPart().Bodies[13].Edges[10],
        GetRootPart().Bodies[19].Edges[11]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Head_Transition_Edge_Size")
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[7].Edges[9],
        GetRootPart().Bodies[1].Edges[8],
        GetRootPart().Bodies[19].Edges[9],
        GetRootPart().Bodies[13].Edges[8]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Head_Transition_Edge_Size_2")
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[9].Edges[11],
        GetRootPart().Bodies[21].Edges[11],
        GetRootPart().Bodies[15].Edges[10],
        GetRootPart().Bodies[3].Edges[10]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Shell_Tansition_Edge_Size_1")
    # EndBlock

    # Create Named Selection Group
    primarySelection = EdgeSelection.Create([GetRootPart().Bodies[17].Edges[10],
        GetRootPart().Bodies[5].Edges[10],
        GetRootPart().Bodies[11].Edges[11],
        GetRootPart().Bodies[23].Edges[11]])
    secondarySelection = Selection.Empty()
    result = NamedSelection.Create(primarySelection, secondarySelection)
    # EndBlock

    # Rename Named Selection
    result = NamedSelection.Rename("Group1", "Shell_Transition_Edge_Size_2")
    # EndBlock
    
    # Make Components
    selection = BodySelection.Create(GetRootPart().Bodies[:])
    result = ComponentHelper.MoveBodiesToComponent(selection, None)
    # EndBlock
	
	# Share Topology
	options = ShareTopologyOptions()
	options.Tolerance = MM(0.2)
	result = ShareTopology.FindAndFix(options)
	# EndBlock